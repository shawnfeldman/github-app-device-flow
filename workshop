#!/usr/bin/env ruby

require "net/http"
require "json"
require "uri"

def help
  puts "usage: workshop <login|create-issue|help>"
end

CLIENT_ID = ENV.fetch("CLIENT_ID")
REPO = ENV.fetch("REPO")

def parse_response(response)
  case response
  when Net::HTTPOK, Net::HTTPCreated
    JSON.parse(response.body)
  else
    puts response
    puts response.body
    exit 1
  end
end

def login
  # Step 1
  entry_uri = URI("https://github.com/login/device/code")
  headers = {"Accept" => "application/json"}

  entry_params = URI.encode_www_form("client_id" => CLIENT_ID)

  http_result = Net::HTTP.post(entry_uri, entry_params, headers)
  response = parse_response(http_result)

  # Step 2
  puts "Please visit: #{response["verification_uri"]}\n"
  puts "and enter code: #{response["user_code"]}"

  # Step 3
  poll_uri = URI("https://github.com/login/oauth/access_token")

  poll_params = URI.encode_www_form({
    "client_id" => CLIENT_ID,
    "device_code" => response["device_code"],
    "grant_type" => "urn:ietf:params:oauth:grant-type:device_code"
  })
  wait_time = response["interval"]

  loop do
    poll_result = Net::HTTP.post(poll_uri, poll_params, headers)
    poll_response = parse_response(poll_result)

    if poll_response.key?("error")
      case poll_response["error"]
      when "authorization_pending"
        sleep wait_time
        next
      when "slow_down"
        wait_time = poll_response["interval"]
        sleep wait_time
        next
      else
        puts poll_response
        exit 1
      end
    end

    File.write("./.token", poll_response["access_token"])

    puts "ðŸŽ‰ You've authenticated!"
    break
  end
end

def create_issue
  issue_uri = URI("https://api.github.com/repos/#{REPO}/issues")
  params = {
    "title" => "Success! I have authenticated with Device Flow!",
    "body"  => ":tada: :partying_face:"
  }.to_json

  headers = {
    "Accept" => "application/json",
    "Authorization" => "token #{File.read("./.token")}",
    "User-Agent" => "GitHub-Apps-2020-Universe"
  }

  result = Net::HTTP.post(issue_uri, params, headers)
  response = parse_response(result)

  p response
end

case ARGV[0]
when "help"
  help
when "login"
  login
when "create-issue"
  create_issue
else
  help
end
